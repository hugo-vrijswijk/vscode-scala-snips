{
  // Place your snippets for scala here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "def main": {
    "prefix": "def main",
    "body": [
      "def main(args: Array[String]): Unit = {",
      "\t${1:expr}",
      "}"
    ],
    "description": "Main function"
  },
  "def": {
    "prefix": "def",
    "body": [
      "def ${1:defName}(${2:param}: ${3:ParamType}): ${4:ReturnType} = {",
      "\t$0",
      "}"
    ],
    "description": "New function definition"
  },
  "def-nb": {
    "prefix": "def-nb",
    "body": "def ${1:defName}(${2:param}: ${3:ParamType}): ${4:ReturnType} = $0",
    "description": "New function definition (no brackets)"
  },
  "private def": {
    "prefix": "private def",
    "body": [
      "private def ${1:defName}(${2:param}: ${3:ParamType}): ${4:ReturnType} = {",
      "\t$0",
      "}"
    ],
    "description": "New private function definition"
  },
  "private def-nb": {
    "prefix": "private def-nb",
    "body": "private def ${1:defName}(${2:param}: ${3:ParamType}): ${4:ReturnType} = $0",
    "description": "New private function definition (no brackets)"
  },
  "apply": {
    "prefix": "apply",
    "body": [
      "def apply(${1:paramName}: ${2:ParamType}): ${3:$TM_FILENAME_BASE} = {",
      "\t$0",
      "}"
    ],
    "description": "Apply function"
  },
  "apply-nb": {
    "prefix": "apply-nb",
    "body": "def apply(${1:paramName}: ${2:ParamType}): ${3:$TM_FILENAME_BASE} = $0",
    "description": "Apply function (no brackets)"
  },
  "unapply": {
    "prefix": "unapply",
    "body": [
      "def unapply(${1:paramName}: ${2:ParamType}): Option[${3:$TM_FILENAME_BASE}] = {",
      "\t$0",
      "}"
    ],
    "description": "Unapply template"
  },
  "unapply-nb": {
    "prefix": "unapply-nb",
    "body": "def unapply(${1:paramName}: ${2:ParamType}): Option[${3:$TM_FILENAME_BASE}] = $0",
    "description": "Unapply template (no brackets)"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for {",
      "\t${1:variable} <- ${2:collection}",
      "} {",
      "\t${0}",
      "}"
    ],
    "description": "For statement"
  },
  "for-nb": {
    "prefix": "for-nb",
    "body": [
      "for {",
      "\t${1:variable} <- ${2:collection}",
      "} ${0}"
    ],
    "description": "For statement (no brackets)"
  },
  "fory": {
    "prefix": "fory",
    "body": [
      "for {",
      "\t${1:a} <- ${2:b}",
      "} yield ${1}"
    ],
    "description": "For-yield statement"
  },
  "map": {
    "prefix": "map",
    "body": [
      "${1:array}.map(${2:element} => {",
      "\t$0",
      "})",
    ],
    "description": "For-yield statement"
  },
  "map-nb": {
    "prefix": "map-nb",
    "body": "${1:array}.map(${2:element} => $0)",
    "description": "Map statement (no brackets)"
  },
  "scaladoc": {
    "prefix": "scaladoc",
    "body": [
      "/** ${1:title}",
      " *",
      " *  ${2:moreDocumentation}",
      " */",
    ],
    "description": "ScalaDoc"
  },
  "scaladoc-javastyle": {
    "prefix": "scaladoc-javastyle",
    "body": [
      "/**",
      " * ${1:title}",
      " *",
      " *  ${2:moreDocumentation}",
      " */"
    ],
    "description": "ScalaDoc (Javadoc style)"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "\t${1:expression}",
      "} catch {",
      "\tcase ex: ${2:ExceptionClass} => ${3:doSomething}",
      "}"
    ],
    "description": "Try/catch statement"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if {",
      "\t${1:ifExpression}",
      "}"
    ],
    "description": "If statement"
  },
  "if-nb": {
    "prefix": "if-nb",
    "body": "if ${1:ifExpression}",
    "description": "If statement (no brackets)"
  },
  "ifelse": {
    "prefix": "ifelse",
    "body": [
      "if {",
      "\t${1:ifExpression}",
      "} else {",
      "\t${2:elseExpression}",
      "}"
    ],
    "description": "If-else statement"
  },
  "ifelse-nb": {
    "prefix": "ifelse-nb",
    "body": "if ${1:ifExpression} else ${2:elseExpression}",
    "description": "If-else statement (no brackets)"
  },
  "cc": {
    "prefix": "cc",
    "body": "case class ${1:ClassName}($2:params)",
    "description": "Case class"
  },
  "Class": {
    "prefix": "class",
    "body": [
      "class ${1:ClassName} {",
      "\t$0",
      "}"
    ],
    "description": "Class"
  },
  "Trait": {
    "prefix": "trait",
    "body": [
      "trait ${1:TraitName} {",
      "\t$0",
      "}"
    ],
    "description": "Trait"
  },
  "Object": {
    "prefix": "object",
    "body": [
      "object ${1:ObjectName} {",
      "\t$0",
      "}"
    ],
    "description": "Object"
  },
  "extends": {
    "prefix": "extends",
    "body": "extends ${1:ExtendsName}",
    "description": "Extends"
  },
  "val": {
    "prefix": "val",
    "body": "val ${1:valName} = ${2:expression}",
    "description": "Val statement"
  }
}
